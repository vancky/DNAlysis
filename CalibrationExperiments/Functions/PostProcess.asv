function [ output ] = PostProcess( config, analysis )
    % Post Process - Performs the post processing
    %   Detailed explanation goes here

    
    maxIntensities = analysis.stats.roi.maxIntensity;
    meanIntensities = analysis.stats.roi.meanIntensity;
    
    levelsMax = cell( 1,config.numRois);
    stepsMax= cell( 1,config.numRois);
    allLevels = [];
    allSteps = [];
    
    
    for ii = 51:55
        maxIntensity = maxIntensities( ii, :);
        figure;
        findchangepts( maxIntensity, 'MinThreshold', 5e5, 'Statistic', 'mean');
    end
    
    for ii = 81:85
        maxIntensity = maxIntensities( ii, :);
        figure;
        findchangepts( maxIntensity, 'MinThreshold', 5e5, 'Statistic', 'mean');
    end
    
    idx = 0;
    for ii = 1:config.numRois
        
        maxIntensity = maxIntensities( ii, :);
        meanIntensity = meanIntensities( ii, :);
        
        pts = findchangepts( maxIntensity, 'MinThreshold', 5e5, 'Statistic', 'mean');

        numPts = length( pts);
        if numPts > 0
            idx = idx+1;

            levelsMax{idx} = zeros( 1, numPts);
            levelsMax{idx}(1) = mean( maxIntensity( 1:(pts(1)-1) ));
            levelsMax{idx}(numPts+1) = mean( maxIntensity( pts(numPts):config.numFrames ));
            
            for j = 1:(numPts-1)
                levelsMax{idx}(j+1) = mean( maxIntensity( pts(j) : (pts(j+1)-1) ));
            end
            
            levelsMean{idx} = zeros( 1, numPts);
            levelsMean{idx}(1) = mean( meanIntensity( 1:(pts(1)-1) ));
            levelsMean{idx}(numPts+1) = mean( meanIntensity( pts(numPts):config.numFrames ));
            
            for j = 1:(numPts-1)
                levelsMean{idx}(j+1) = mean( meanIntensity( pts(j) : (pts(j+1)-1) ));
            end

            levelsMax{idx} = round(levelsMax{idx});
            stepsMax{idx} = abs( diff( levelsMax{idx}));
            
            levelsMean{idx} = round(levelsMean{idx});
            stepsMean{idx} = abs( diff( levelsMean{idx}));
            

            allLevels = [ allLevels, levelsMax{idx}];
            allSteps = [ allSteps, stepsMax{idx}];
            allLevels = [ allLevels, levelsMax{idx}];
            allSteps = [ allSteps, stepsMax{idx}];
            
        end
    end
    
    plotTitle = 'Intensity distribution of Photobleaching Steps';
    figure; histogram( allSteps, 20); title( plotTitle)
    ylabel('Counts'); xlabel('StepSize')

    %GaussianMleFit( allSteps, [0, 700], 50, plotTitle)
    
    output.levels = levelsMax;
    output.steps = stepsMax;
    output.allSteps = allSteps;
    output.allLevels = allLevels;
    
end

