function [ generateGaussianMask ] = GenerateGaussianMask( config, brightFinder , fitHelicases )
    % GenerateGaussianMask
    % Generates a Gaussian mask based on the fitting parameters.
    % if the fit has failed (can be seen by exitflag) simply replace the
    % patch with background noise (0).
    
    fitGaussian = clean.fitGaussian;
    
    rowIndex = brightFinder.rowIndex;
    colIndex = brightFinder.colIndex;
    fitSize  = config.fitSize; 
    domainSize = brightFinder.imageSize;
    
    % make a big mask to make sure that patches near the edge don't cause trouble
    bigMask=zeros( domainSize(1)+2*fitSize, domainSize(2)+2*fitSize );         % initiate the mask
 
    generateGaussianMask.gaussian=GenerateGaussian(config, fitGaussian.fit);  % generate the Gaussian mask

    bigMask(rowIndex:rowIndex+2*halfPatchSize, colIndex:colIndex+2*halfPatchSize)=generateGaussianMask.gaussian; % add the Gaussian to the big mask
    
    % now retrieve the correct mask from the big mask
    
    generateGaussianMask.mask(1:domainSize , 1:domainSize )=bigMask(1+fitSize:domainSize+halfPatchSize , 1+halfPatchSize:domainSize+halfPatchSize); 
    generateGaussianMask.mask=uint16(generateGaussianMask.mask);
    
end

