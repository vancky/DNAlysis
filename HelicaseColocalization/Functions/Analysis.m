function [ output ] = Analysis( config, inputImages )
    % Analysis - This function performs the analysis

    for ii = 1:2 %config.numFovs
        fprintf('Data analysis progress %i/%i.\n' , ii , config.numFovs)   
        spotFinder{ii}.cam0 = SpotFinder( inputImages.cam0{ii}, ...
                'meanThreshold' , config.meanThreshold.cam0, ...
                'diameterThreshold', config.diameterThreshold.cam0, ...
                'mexiHatSigma', config.mexiHatSigma.cam0, ...
                'eccentricityThreshold', config.eccentricityThreshold, ...
                'fitSize', config.fitSize);
        spotFinder{ii}.cam1 = SpotFinder( inputImages.cam1{ii}, ...
                'meanThreshold' , config.meanThreshold.cam1, ...
                'diameterThreshold', config.diameterThreshold.cam1, ...
                'mexiHatSigma', config.mexiHatSigma.cam1, ...
                'eccentricityThreshold', config.eccentricityThreshold, ...
                'fitSize', config.fitSize);
            
        SpotFinderVisualisation( inputImages.cam0{ii}, ...
                                  spotFinder{ii}.cam0.circle, [100 120])
        SpotFinderVisualisation( inputImages.cam1{ii}, ...
                                  spotFinder{ii}.cam1.circle, [100 250])
        
        fitHelicases{ii}.cam0 = FitHelicases( config, ...
            spotFinder{ii}.cam0.spots, spotFinder{ii}.cam0.centersFormatted);
        fitHelicases{ii}.cam1 = FitHelicases( config, ...
            spotFinder{ii}.cam1.spots, spotFinder{ii}.cam1.centersFormatted);
        matchHelicases{ii} = MatchHelicases( config, ...
            fitHelicases{ii}.cam0.fitPosition, fitHelicases{ii}.cam1.fitPosition);

        fprintf('The number of spots for cam 0 is %i.\n' , spotFinder{ii}.cam0.numSpots)
        fprintf('The number of spots for cam 1 is %i.\n' , spotFinder{ii}.cam1.numSpots)
        fprintf('The fraction of helicases colocalizing is %.2f .\n' , matchHelicases{ii}.matchFraction)
        fprintf('The fraction of helicases colocalizing at random is %.2f .\n' , matchHelicases{ii}.matchFractionRandom)
        output.spotFinder = spotFinder;
        output.fitHelicases = fitHelicases;
        output.matchHelicases = matchHelicases;
    end
            

end

